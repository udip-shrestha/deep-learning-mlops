pipeline {
  agent any
  environment {
    ECR_REPOSITORY        = credentials('ECR_REPOSITORY')
    AWS_ACCOUNT_ID        = credentials('AWS_ACCOUNT_ID')
    AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')

    AWS_REGION = 'us-east-2'                                 // <<< ADDED: centralize region
    IMAGE_TAG  = "${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7)}" // <<< ADDED: immutable tag
  }

  stages {
    stage('Continuous Integration') {
      steps {
        script {
          echo "Linting repository"
          echo "Running unit tests"
        }
      }
    }

    stage('Login to ECR') {
      steps {
        script {
          sh '''
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_DEFAULT_REGION="${AWS_REGION}"

            # ensure repo exists (idempotent)                      # <<< ADDED
            aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name "${ECR_REPOSITORY}"

            aws ecr get-login-password --region "${AWS_REGION}" | \
              docker login --username AWS --password-stdin \
              "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          '''
        }
      }
    }

    stage('Build Image') {
      steps {
        script {
          sh '''
            IMAGE_BASE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"  # <<< CHANGED
            docker build -t "${IMAGE_BASE}:${IMAGE_TAG}" -t "${IMAGE_BASE}:latest" .              # <<< CHANGED
          '''
        }
      }
    }

    stage('Push Image') {
      steps {
        script {
          sh '''
            IMAGE_BASE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"  # <<< CHANGED
            docker push "${IMAGE_BASE}:${IMAGE_TAG}"                                              # <<< CHANGED
            docker push "${IMAGE_BASE}:latest"                                                    # <<< CHANGED
          '''
        }
      }
    }

    stage('Continuous Deployment') {
        steps {
            sshagent(['ssh_key']) {
            sh '''
                set -e
                REMOTE_HOST="3.149.17.197"
                REMOTE_USER="ubuntu"

                IMAGE_BASE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
                FULL_IMAGE="${IMAGE_BASE}:${IMAGE_TAG}"

                # copy compose from workspace to server
                scp -o StrictHostKeyChecking=no docker_compose.yml \
                    ${REMOTE_USER}@${REMOTE_HOST}:/home/${REMOTE_USER}/docker-compose.yml

                # login to ECR on server and deploy
                ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} "
                export AWS_ACCESS_KEY_ID='${AWS_ACCESS_KEY_ID}' &&
                export AWS_SECRET_ACCESS_KEY='${AWS_SECRET_ACCESS_KEY}' &&
                export AWS_DEFAULT_REGION='${AWS_REGION}' &&    # uses env value defined above  
                aws ecr get-login-password --region '${AWS_REGION}' | \
                    docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com &&
                IMAGE_NAME='${FULL_IMAGE}' docker compose -f docker-compose.yml pull &&   # pull first  
                IMAGE_NAME='${FULL_IMAGE}' docker compose -f docker-compose.yml up -d     # then up -d  
                "
            '''
            }
        }
    }


    stage('Post-Deployment Checks') {
      steps {
        script {
          echo "Running post-deployment checks"
          // Add any post-deployment validation scripts here
        }
      }
    }


  }

  post {
    always {
      sh 'docker system prune -f'
    }
  }
}
